using System;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Security.Cryptography.X509Certificates;

namespace ArrayMatrici
{
    class Program
    {
        //<
        //>
        static void Main(string[] args)
        {
            bool x = false, y = false;
            int scelta = 0, scelta2 = 0;
            do
            {                
                Console.WriteLine("1. Dati in input i numeri interi positivi N e P, crea un array chiamato NUMERI di lunghezza N e riempilo con i primi N numeri pari partendo da P compreso, a crescere.Stampa l'array così ottenuto su un'unica riga.");
                Console.WriteLine("2. Stampare la media dei valori contenuti in NUMERI, il valore massimo e la sua posizione, il valore minimo e la sua posizione.");
                Console.WriteLine("3. Creare l'array NUMERI_INVERSI e riempirlo in modo che contenga gli stessi valori di NUMERI ma al contrario.Stampare NUMERI_INVERSI.");
                Console.WriteLine("4. Creare l'array NUMERI_DISPARI e riempirlo in modo che contenga la sequenza di dispari complementare di NUMERI.Stampare NUMERI_DISPARI.");
                Console.WriteLine("5. Crea l'array NUMERI2 in modo che contenga i valori NUMERI moltiplicati per 2. Stampare NUMERI2.");
                Console.WriteLine("6. Crea la matrice quadrata M di dimensione D in modo che contenga valori casuali compresi tra 0 e 50.Stampa la matrice.");
                Console.WriteLine("7. Stampare il risultato della somma di tutti i valori contenuti in M.");
                Console.WriteLine("8. Stampare il valore minimo presente in M e in quali coordinate si trova.");
                Console.WriteLine("9. Creare la matrice M2 come la trasposta di M. Stampare M2.");
                Console.WriteLine("10. Data in input la dimensione della matrice quadrata I, creare e stampare la matrice identità.");
                Console.WriteLine("");

                do
                {
                    try
                    {
                        Console.Write("Scegliere un esercizio: ");
                        scelta = int.Parse(Console.ReadLine());
                        x = true;
                        if (scelta < 0 || scelta > 10)
                        {
                            Console.WriteLine("Errore inerimento scelta.\n");
                            x = false;
                        }
                        else
                        {
                            Console.WriteLine("");
                        }

                    }
                    catch
                    {
                        Console.WriteLine("Errore inerimento scelta.\n");
                    }

                } while (x == false);

                switch (scelta)
                {
                    case 1:
                        Console.WriteLine("Esercizio 1:\n");
                        esercizio1();
                        break;
                    case 2:
                        Console.WriteLine("Esercizio 2:\n");
                        esercizio2();
                        break;
                    case 3:
                        Console.WriteLine("Esercizio 3:\n");
                        esercizio3();
                        break;
                    case 4:
                        Console.WriteLine("Esercizio 4:\n");
                        esercizio4();
                        break;
                    case 5:
                        Console.WriteLine("Esercizio 5:\n");
                        esercizio5();
                        break;
                    case 6:
                        Console.WriteLine("Esercizio 6:\n");
                        esercizio6();
                        break;
                    case 7:
                        Console.WriteLine("Esercizio 7:\n");
                        esercizio7();
                        break;
                    case 8:
                        Console.WriteLine("Esercizio 8:\n");
                        esercizio8();
                        break;
                    case 9:
                        Console.WriteLine("Esercizio 9:\n");
                        esercizio9();
                        break;
                    case 10:
                        Console.WriteLine("Esercizio 10:\n");
                        esercizio10();
                        break;
                }

                Console.Write("\nVuoi ricominciare: 0(No) / 1(Yes): ");
                try
                {
                    scelta2 = int.Parse(Console.ReadLine());
                    if (scelta2 == 1)
                    {
                        y = true;
                        Console.Clear();
                    }
                    else
                    {
                        y = false;
                    }
                }
                catch { y = false; }

            } while (y == true);
        }

        static int getNumber()
        {
            Console.Write("     Iserisci un numero: ");
            return int.Parse(Console.ReadLine());
        }

        static void errorNumber()
        {
            Console.WriteLine("     Errore inerimento numeri\n");
        }

        static int[] arrayCreate(int n1, int n2)
        {
            int[] numeri = new int[n1];

            for (int i = 0; i < numeri.Length; i++)
            {
                numeri[i] = n2;
                n2 += 2;
            }

            return numeri;
        }

        static int[] arrayCreateInv(int[] numeri)
        {
            int[] numeri_inversi = new int[numeri.Length];
            int len = numeri.Length - 1;
            for (int i = 0; len >= 0; i++, len--)
            {
                numeri_inversi[i] = numeri[len];
            }
            return numeri_inversi;
        }

        static int[] arrayCreateDispari(int[] numeri)
        {
            int[] numeri_dispari = new int[numeri.Length];
            for (int i = 0; i < numeri.Length; i++)
            {
                numeri_dispari[i] = numeri[i] + 1;
            }
            return numeri_dispari;
        }

        static int[] arrayCreateDoppio(int[] numeri)
        {
            int[] numeri2 = new int[numeri.Length];
            for (int i = 0; i < numeri.Length; i++)
            {
                numeri2[i] = numeri[i] * 2;
            }
            return numeri2;
        }

        static void arrayRes(ref string res, int[] numeri)
        {
            for (int i = 0; i < numeri.Length; i++)
            {
                if (i == numeri.Length - 1)
                {
                    res = res + numeri[i].ToString() + "}";
                }
                else
                {
                    res = res + numeri[i].ToString() + ",";
                }
            }
        }       

        static double getMedia(int[] numeri)
        {
            int somma = 0, media = 0;
            for (int i = 0; i < numeri.Length; i++)
            {
                somma += numeri[i];
            }

            media = somma / numeri.Length;

            return media;
        }

        static void getMax(ref int max, ref int pmax, int[] numeri)
        {
            for (int i = 0; i < numeri.Length; i++)
            {
                if(max < numeri[i])
                {
                    max = numeri[i];
                    pmax = i;
                }
            }
        }

        static void getMin(ref int min, ref int pmin, int[] numeri)
        {
            for (int i = 0; i < numeri.Length; i++)
            {
                if (min > numeri[i])
                {
                    min = numeri[i];
                    pmin = i;
                }
            }
        }

        static int[] createArrayNumeri()
        {
            bool x = false;
            int n1 = 0, n2 = 0;
            do
            {
                try
                {
                    n1 = getNumber();
                    n2 = getNumber();
                    x = true;
                    if (n1 <= 0 || n2 <= 0)
                    {
                        errorNumber();
                        x = false;
                    }

                }
                catch
                {
                    errorNumber();
                }

            } while (x == false);

            if (n2 % 2 != 0)
            {
                n2++;
            }

            int[] numeri = arrayCreate(n1, n2);
            return numeri;
        }

        static void esercizio1() 
        {
            string res = "\n     NUMERI = {";

            int[] numeri = createArrayNumeri();

            arrayRes(ref res, numeri);

            Console.WriteLine(res);
        }

        static void esercizio2() {

            int[] numeri = createArrayNumeri();

            string res = "     NUMERI = {";
            arrayRes(ref res, numeri);
            Console.WriteLine(res + "\n");

            double media = getMedia(numeri);
            int max = 0, min = int.MaxValue, pmax = 0, pmin = 0;

            getMax(ref max, ref pmax, numeri);
            getMin(ref min, ref pmin, numeri);

            Console.WriteLine("     La media è: " + media.ToString());
            Console.WriteLine("     Il valore massimo è: " + max.ToString() + ", la sua posizione è: " + pmax.ToString());
            Console.WriteLine("     Il valore minimo è: " + min.ToString() + ", la sua posizione è: " + pmin.ToString());
        }

        static void esercizio3() {

            int[] numeri = createArrayNumeri();

            string ress = "\n     NUMERI = {";
            arrayRes(ref ress, numeri);
            Console.WriteLine(ress + "\n");

            int[] numeri_inversi = arrayCreateInv(numeri);

            string res = "     NUMERI_INVERSI = {";
            
            arrayRes(ref res, numeri_inversi);
            
            Console.WriteLine(res);
        }

        static void esercizio4() {

            int[] numeri = createArrayNumeri();

            string ress = "\n     NUMERI = {";
            arrayRes(ref ress, numeri);
            Console.WriteLine(ress + "\n");

            int[] numeri_dispari = arrayCreateDispari(numeri);

            string res = "     NUMERI_DISPARI = {";

            arrayRes(ref res, numeri_dispari);

            Console.WriteLine(res);
        }

        static void esercizio5() {
            int[] numeri = createArrayNumeri();

            string ress = "\n     NUMERI = {";
            arrayRes(ref ress, numeri);
            Console.WriteLine(ress + "\n");

            int[] numeri2 = arrayCreateDoppio(numeri);

            string res = "     NUMERI2 = {";

            arrayRes(ref res, numeri2);

            Console.WriteLine(res);
        }

        static int[,] createMatrixM(int d)
        {
            int[,] matrix = new int[d, d];
            return matrix;
        }

        static int createMatrixD()
        {
            bool x = false;
            int d = 0;
            do
            {
                try
                {
                    d = getNumber();
                    x = true;
                    if (d <= 0)
                    {
                        errorNumber();
                        x = false;
                    }
                }
                catch
                {
                    errorNumber();
                }

            } while (x == false);

            return d;
        }

        static void initializeMatrixRandom(ref int[,] matrix, int d)
        {
            Random rnd = new Random((int)DateTime.Now.Ticks);
            for (int x = 0; x < d; x++)
            {
                for (int y = 0; y < d; y++)
                {
                    matrix[x, y] = rnd.Next(0,50);
                }
            }
        }

        static string matrixRes(int[,] matrix, int d)
        {
            string res = "\n     ";
            for (int x = 0; x < d; x++)
            {
                for (int y = 0; y < d; y++)
                {
                    if(matrix[x, y] < 10)
                    {
                        res += " ";
                    }
                    if (y == d - 1)
                    {
                        res += matrix[x, y].ToString();
                    }
                    else
                    {
                        res += matrix[x, y].ToString() + " - ";
                    }
                }
                res += "\n     ";
            }
            return res;
        }

        static int sommaMatrix(int[,] matrix, int d)
        {
            int somma = 0;
            for (int x = 0; x < d; x++)
            {
                for (int y = 0; y < d; y++)
                {
                    somma += matrix[x, y];
                }
            }
            return somma;
        }

        static void GetMinMatrix(ref int min, ref int pmin1, ref int pmin2, int[,] matrix, int d)
        {
            for (int x = 0; x < d; x++)
            {
                for (int y = 0; y < d; y++)
                {
                    if (min > matrix[x, y])
                    {
                        min = matrix[x, y];
                        pmin1 = x;
                        pmin2 = y;
                    }
                }
            }
        }

        static int[,] invertMatrix(int[,] matrix, int d)
        {
            int[,] matrix_inversa = new int[d, d];
            for (int x = 0; x < d; x++)
            {
                for (int y = 0; y < d; y++)
                {
                    matrix_inversa[x, y] = matrix[y, x];
                }
            }
            return matrix_inversa;
        }

        static int[,] identityMatrix(int[,] matrix, int d)
        {
            int[,] matrix_identity = new int[d, d];
            for (int x = 0; x < d; x++)
            {
                for (int y = 0; y < d; y++)
                {
                    if(x == y)
                    {
                        matrix_identity[x, y] = 1;
                    }
                    else
                    {
                        matrix_identity[x, y] = 0;
                    }
                    
                }
            }
            return matrix_identity;
        }

        static void esercizio6() {

            int d = createMatrixD();
            int[,] m = createMatrixM(d);

            initializeMatrixRandom(ref m, d);

            string res = matrixRes(m, d);

            Console.WriteLine(res);
        }

        static void esercizio7() {

            int d = createMatrixD();
            int[,] m = createMatrixM(d);

            initializeMatrixRandom(ref m, d);

            string res = matrixRes(m, d);

            Console.WriteLine(res);

            int somma = sommaMatrix(m, d);
            Console.WriteLine("     La somma di tutti i valori presenti in M è: " + somma.ToString());
        }

        static void esercizio8() {

            int d = createMatrixD();
            int[,] m = createMatrixM(d);

            initializeMatrixRandom(ref m, d);

            string res = matrixRes(m, d);

            Console.WriteLine(res);

            int min = int.MaxValue, pmin1 = 0, pmin2 = 0;

            GetMinMatrix(ref min, ref pmin1, ref pmin2, m, d);

            Console.WriteLine("     Il valore minimo è: " + min.ToString() + ", le sue cordinate sono: " + pmin1.ToString() + ", " + pmin2.ToString());
        }

        static void esercizio9() {

            int d = createMatrixD();

            int[,] m = createMatrixM(d);

            initializeMatrixRandom(ref m, d);

            string ress = matrixRes(m, d);
            Console.WriteLine(ress);

            int[,] matrix_inversa = invertMatrix(m, d);

            string res = matrixRes(matrix_inversa, d);
            Console.WriteLine(res);            
        }

        static void esercizio10() {
            int d = createMatrixD();

            int[,] m = createMatrixM(d);

            initializeMatrixRandom(ref m, d);

            string ress = matrixRes(m, d);
            Console.WriteLine(ress);

            int[,] matrix_identita = identityMatrix(m, d);

            string res = matrixRes(matrix_identita, d);
            Console.WriteLine(res);
        }
    }
}
